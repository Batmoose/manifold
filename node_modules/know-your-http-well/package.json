{
  "name": "know-your-http-well",
  "version": "0.0.1",
  "author": {
    "name": "Andrei Neculau",
    "email": "@andreineculau"
  },
  "description": "HTTP headers, media-types, methods, relations and status codes, all summarized and linking to their specification.",
  "repository": {
    "type": "git",
    "url": "git://github.com/andreineculau/know-your-http-well.git"
  },
  "keywords": [
    "http",
    "rfc",
    "json"
  ],
  "license": "MIT",
  "dependencies": {
    "amdefine": "0.0.4"
  },
  "main": "js/index",
  "readme": "# KNOW YOUR HTTP well\n\nHTTP headers, media-types, methods, relations and status codes, all summarized and linking to their specification.\n\n## Table of Contents\n\n- [SPECS](specs.md)\n- [HEADERS](headers.md)\n- MEDIA-TYPES\n- [METHODS](methods.md)\n- [RELATIONS](relations.md)\n- [STATUS CODES](status-codes.md)\n\n## How to convert to other formats\n\n* [pandoc](http://johnmacfarlane.net/pandoc/)\n* [Marked](http://markedapp.com/)\n* ...\n\n## Packages\n\n### Emacs\n\n```emacs\n(require 'status-codes)\n;; M-x http-status-code\n```\n\n### JavaScript\n\n```javascript\nvar httpWell = require('know-your-http-well'),\n    httpSC = httpWell.statusPhrasesToCodes,\n    httpSP = httpWell.statusCodesToPhrases;\n\n// on the server side\nres.statusCode = httpSC.NOT_FOUND\n\n// on the client side\nif (res.statusCode !== httpSC.OK) {\n    // Log \"Request returned 404 Not Found\"\n    log('Request returned ' + res.statusCode + ' ' + httpSP[res.statusCode]);\n}\n```\n\n## License\n\n[Unlicense](http://unlicense.org/).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/andreineculau/know-your-http-well/issues"
  },
  "_id": "know-your-http-well@0.0.1",
  "_from": "know-your-http-well@"
}
